<?php
/**
 * Created by PhpStorm.
 * User: fadhel
 * Date: 28/11/2018
 * Time: 16:46
 */

namespace Esprit\TrocBundle\Controller;
use AppBundle\Entity\User;
use Esprit\TrocBundle\Entity\Commentaire;
use Esprit\TrocBundle\Entity\Echange;
use Esprit\TrocBundle\Entity\Categorie;
use Esprit\TrocBundle\Entity\Vote;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Intl\Intl;

class EchangeController extends Controller
{
    public function AddEchangeAction(Request $request)
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();

        if ($user == null || empty($user) || $user == 'anon.') {
            return $this->redirectToRoute('fos_user_security_login');
        } else {
            $id_user = $user->getId();
            $currentUser = $this->getDoctrine()->getRepository(User::class)->find($id_user);
            $listEchanges = $this->getDoctrine()->getRepository(Echange::class)->findBy(array('idAnnonceur' => $currentUser));
            $echange = new Echange();
            $cat = new Categorie();
            if ($request->getMethod() == "POST") {
                $categorieRequest = $request->get('categorie_name');
                $repositoryCat = $this->getDoctrine()->getRepository(Categorie::class);
                $resultcat = $repositoryCat->createQueryBuilder('p')
                    ->where("p.nom = '$categorieRequest'")
                    ->getQuery()->getOneOrNullResult();

                if (null == $resultcat || empty($resultcat)) {
                    $cat->setNom($categorieRequest);
                    $e = $this->getDoctrine()->getManager();
                    $e->persist($cat);
                    $e->flush();
                    $resultcat = $cat;
                }


                if (null != $currentUser && null != $resultcat) {
                    $filephoto = $request->files->get('photo');
                    $fileNamephoto = $this->generateUniqueFileName() . '.' . $filephoto->guessExtension();
                    $filephoto->move($this->getParameter('brochures_directory'), $fileNamephoto);
                    $echange->setPhoto($fileNamephoto);
                    $echange->setDateAjout(new \DateTime());
                    $echange->setTitreAfficher($request->get('titre_afficher'));
                    $echange->setTitreDemande($request->get('titre_demander'));
                    $echange->setEmplacement($request->get('emplacement'));
                    $echange->setDescription($request->get('description'));
                    $echange->setIdUser($currentUser);
                    $echange->setCategorieAfficher($resultcat);
                    $em = $this->getDoctrine()->getManager();
                    $em->persist($echange);
                    $em->flush();
                    $newlistEchanges = $this->getDoctrine()->getRepository(Echange::class)->findBy(array('idAnnonceur' => $currentUser));

                }
                return $this->render('@EspritTroc/Echange/add_echange.html.twig', array(
                    'echanges_infos' => $newlistEchanges));
            } else {

                return $this->render('@EspritTroc/Echange/add_echange.html.twig', array(
                    'echanges_infos' => $listEchanges));
            }
        }

    }

    function searchCategorieAction(Request $request)
    {

        $plein_text = $request->get('plein_text');
        $repository = $this->getDoctrine()->getRepository(Categorie::class);
        $results = $repository->createQueryBuilder('p')
            ->where("p.nom LIKE '%$plein_text%'")
            ->getQuery()->getArrayResult();
        return new JsonResponse($results);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    public function DeleteEchangeAction($id)
    {
        $echangeInfos = $this->getDoctrine()->getRepository(Echange::class)->find($id);
        if ($echangeInfos == null) {
            return new Response("Echange non trouvé");
        }
        $em = $this->getDoctrine()->getManager();
        $em->remove($echangeInfos);
        $em->flush();
        return $this->redirectToRoute('add_echange');


    }

    public function UpdateEchangeAction(Request $request, $id)
    {

        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        if ($user == null || empty($user)) {
            return $this->redirectToRoute('fos_user_security_login');
        } else {
            $echInfos = $this->getDoctrine()->getRepository(Echange::class)->find($id);

            $id_user = $user->getId();
            $currentUser = $this->getDoctrine()->getRepository(User::class)->find($id_user);
            $listEchanges = $this->getDoctrine()->getRepository(Echange::class)->findBy(array('idAnnonceur' => $currentUser));

            $cat = new Categorie();
            if ($echInfos == null) {
                return new Response("Annonce non trouvé");
            }
            if ($request->getMethod() == "POST") {
                $categorieRequest = $request->get('categorie_name');
                $repositoryCat = $this->getDoctrine()->getRepository(Categorie::class);
                $resultcat = $repositoryCat->createQueryBuilder('p')
                    ->where("p.nom = '$categorieRequest'")
                    ->getQuery()->getOneOrNullResult();

                if (null == $resultcat || empty($resultcat)) {
                    $cat->setNom($categorieRequest);
                    $e = $this->getDoctrine()->getManager();
                    $e->persist($cat);
                    $e->flush();
                    $resultcat = $cat;
                }

                if (null != $currentUser && null != $resultcat) {
                    $echange = $echInfos;
                    $filephoto = $request->files->get('photo');
                    $fileNamephoto = $this->generateUniqueFileName() . '.' . $filephoto->guessExtension();
                    $filephoto->move($this->getParameter('brochures_directory'), $fileNamephoto);
                    $echange->setPhoto($fileNamephoto);
                    $echange->setDateAjout(new \DateTime());
                    $echange->setTitreAfficher($request->get('titre_afficher'));
                    $echange->setTitreDemande($request->get('titre_demander'));
                    $echange->setEmplacement($request->get('emplacement'));
                    $echange->setDescription($request->get('description'));
                    $echange->setIdUser($currentUser);
                    $echange->setCategorieAfficher($resultcat);
                    $em = $this->getDoctrine()->getManager();
                    $em->persist($echange);
                    $em->flush();

                }
                return $this->redirectToRoute('add_echange');
            } else {
                return $this->render('@EspritTroc/Echange/update_echange.html.twig', array(
                    'echanges_infos' => $listEchanges, 'echange' => $echInfos));
            }
        }

    }


    public function getAllEchangeAction(Request $request)
    {
        $echanges = [];
        $listechanges = $this->getDoctrine()->getRepository(Echange::class)->findAll();
        $categorieRepo = $this->getDoctrine()->getRepository(Categorie::class);
        $categorie = $categorieRepo->findAll();

        if ($request->getMethod() == "POST") {
            $catRequest = $request->get('cat_name');
            $cat = $this->getDoctrine()->getRepository(Categorie::class)->find($catRequest);
            $listechanges = $this->getDoctrine()->getRepository(Echange::class)->findBy(array('categorieAfficher' => $cat));
        }
        foreach ($listechanges as $echange) {
            
            $u = $this->getDoctrine()->getRepository(User::class)->find($echange->getIdAnnonceur());
            $votes = $this->getDoctrine()->getRepository(Vote::class)->countSommeVote($u);
            $votes_count = $this->getDoctrine()->getRepository(Vote::class)->countVote($u);

            if (intval($votes_count['vo']) != 0) {
                $moy_votes = intval($votes['votes']) / intval($votes_count['vo']);
            } else {
                $moy_votes = 0;
            }

            $categorieEchange = $categorieRepo->findOneBy(array('id' => $echange->getCategorieAfficher()));
            $l["categorie"] = $categorieEchange->getNom();
            $l["id"] = $echange->getId();
            $l["titreAfficher"] = $echange->getTitreAfficher();
            $l["titreDemande"] = $echange->getTitreDemande();
            $l["emplacement"] = $echange->getEmplacement();
            $l["date"] = $echange->getDateAjout();
            $l["photo"] = $echange->getPhoto();
            $l["nom_ann"] = $u->getNom();
            $l["prenom_ann"] = $u->getPrenom();
            $l["votes"] = $moy_votes;
            $l["nbvote"] = $votes_count;
            array_push($echanges, $l);

        }


        return $this->render('@EspritTroc/Echange/all_echange.html.twig', array('echanges' => $echanges, 'categorie' => $categorie));
    }


    public function getEchangeByIdAction(Request $request, $id)
    {
        $echanges = [];
        $v = 0;
        $listechanges = $this->getDoctrine()->getRepository(Echange::class)->find($id);
        if ($request->getMethod() == "POST") {
            if ($request->get('rating') != null) {
                $v = $request->get('rating');
            }
            return $this->redirectToRoute('add_commentaire', array('param' => $request->get('id_echange'), 'c' => $request->get('contenu'), 'v' => $v));
        }


        $commentaireRepo = $this->getDoctrine()->getRepository(Commentaire::class);
        $commentareeEch = $commentaireRepo->findBy(['idEchange' => $listechanges->getId()], ['date' => 'ASC']);

        $comment = [];
        foreach ($commentareeEch as $com) {
            $uCom = $this->getDoctrine()->getRepository(User::class)->find($com->getIdUser());
            $votesCom = $this->getDoctrine()->getRepository(Vote::class)->countSommeVote($uCom);
            $votes_countCom = $this->getDoctrine()->getRepository(Vote::class)->countVote($uCom);
            if (intval($votes_countCom['vo']) != 0) {
                $moy_votesCom = intval($votesCom['votes']) / intval($votes_countCom['vo']);
            } else {
                $moy_votesCom = 0;
            }

            $l["idUser"] = $com->getIdUser();
            $l["date"] = $com->getDate();
            $l["contenu"] = $com->getContenu();
            $l["voteCom"] = $moy_votesCom;
            array_push($comment, $l);

        }


        $u = $this->getDoctrine()->getRepository(User::class)->find($listechanges->getIdAnnonceur());
        $votes = $this->getDoctrine()->getRepository(Vote::class)->countSommeVote($u);
        $votes_count = $this->getDoctrine()->getRepository(Vote::class)->countVote($u);

        if (intval($votes_count['vo']) != 0) {
            $moy_votes = intval($votes['votes']) / intval($votes_count['vo']);
        } else {
            $moy_votes = 0;
        }
        $categorieRepo = $this->getDoctrine()->getRepository(Categorie::class);
        $categorieEchange = $categorieRepo->findOneBy(array('id' => $listechanges->getCategorieAfficher()));
        $l["categorie"] = $categorieEchange->getNom();
        $l["id"] = $listechanges->getId();
        $l["titreAfficher"] = $listechanges->getTitreAfficher();
        $l["titreDemande"] = $listechanges->getTitreDemande();
        $l["emplacement"] = $listechanges->getEmplacement();
        $l["description"] = $listechanges->getDescription();
        $l["date"] = $listechanges->getDateAjout();
        $l["photo"] = $listechanges->getPhoto();
        $l["idUser"] = $listechanges->getIdAnnonceur();
        $l["votes"] = $moy_votes;

        array_push($echanges, $l);


        return $this->render('@EspritTroc/Echange/echange_by_id.html.twig', array('echanges' => $echanges, 'commentaire' => $comment));
    }


}