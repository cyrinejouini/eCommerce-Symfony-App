<?php

namespace Esprit\TrocBundle\Controller;
use Esprit\TrocBundle\Entity\Notification;
use Esprit\TrocBundle\Entity\Vente;
use Esprit\TrocBundle\Entity\Panier;
use Esprit\TrocBundle\Entity\Wishlist;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use AppBundle\Entity\User;



class VenteController extends Controller
{

    public function AddVenteAction(Request $request){
        $user =$this->container->get('security.token_storage')->getToken()->getUser();
        $desc = 'Sans Description';
        if($user == null || empty($user) || $user == "anon."){
            return $this->redirectToRoute( 'fos_user_security_login');
        }
        else{
            $id_user = $user->getId();
            $currentUser=$this->getDoctrine()->getRepository(User::class)->find($id_user);

            $vente = new Vente();
            if($request ->getMethod() =="POST"){


                if(null!=$currentUser){
                    if ($request->get('prix')<0){
                        $this->get('session')->getFlashBag()->add('notice','le prix doit être un nombre positif !');
                        return $this->render('@EspritTroc/Vente/add_vente.html.twig');
                    }
                    else{
                        $filephoto = $request->files->get('photo');
                        $fileNamephoto = $this->generateUniqueFileName().'.'.$filephoto->guessExtension();
                        $filephoto->move($this->getParameter('brochures_directory'), $fileNamephoto);
                        $vente->setPhoto($fileNamephoto);
                        $vente->setDateAjout(new \DateTime());
                        $vente->setTitre($request->get('titre'));
                        $vente->setPrix($request->get('prix'));
                        $vente->setEmplacement($request->get('emplacement'));
                        if($request->get('description') != null){
                            $desc = $request->get('description');
                        }
                        $vente->setDescription($desc);
                        $vente->setCategorie($request->get('categorie'));
                        $vente->setIdUser($currentUser);
                        $em = $this->getDoctrine()->getManager();
                        $em->persist($vente);
                        $em->flush();
                        return $this->redirectToRoute('all_vente');

                    }

                }

            }
            else{

                return $this->render('@EspritTroc/Vente/add_vente.html.twig');
            }
        }
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function DeleteVenteAction($id){
        $vente = $this->getDoctrine()->getRepository(Vente::class)->find($id);
        if($vente==null) {
            return new Response("Achat non trouvé");
        }
        $em = $this->getDoctrine()->getManager();
        $em->remove($vente);
        $em->flush();

        return $this->redirectToRoute('vente_by_user');
    }

    public function UpdateVenteAction(Request $request,$id){


        $user =$this->container->get('security.token_storage')->getToken()->getUser();
        $desc = 'Sans Description';

        if($user == null || empty($user) || $user == "anon."){
            return $this->redirectToRoute( 'fos_user_security_login');
        }
        else{
            $venteInf = $this->getDoctrine()->getRepository(Vente::class)->find($id);

            if($venteInf==null) {
                return new Response("Vente non trouvé");
            }

            $id_user = $user->getId();
            $currentUser=$this->getDoctrine()->getRepository(User::class)->find($id_user);


            if($request ->getMethod() =="POST"){


                if(null!=$currentUser){
                    if ($request->get('prix')<0){
                        $this->get('session')->getFlashBag()->add('notice','le prix doit être un nombre positif !');
                    }
                    else{
                        $vente = $venteInf;
                        $filephoto = $request->files->get('photo');
                        $fileNamephoto = $this->generateUniqueFileName().'.'.$filephoto->guessExtension();
                        $filephoto->move($this->getParameter('brochures_directory'), $fileNamephoto);
                        $vente->setPhoto($fileNamephoto);
                        $vente->setDateAjout(new \DateTime());
                        $vente->setTitre($request->get('titre'));
                        $vente->setPrix($request->get('prix'));
                        $vente->setEmplacement($request->get('emplacement'));
                        if($request->get('description') != null){
                            $desc = $request->get('description');
                        }
                        $vente->setDescription($desc);

                        $vente->setCategorie($request->get('categorie'));

                        $vente->setIdUser($currentUser);
                        $em = $this->getDoctrine()->getManager();
                        $em->persist($vente);
                        $em->flush();


                    }
                }
                return $this->redirectToRoute('vente_by_user');
            }
            else{


                return $this->render('@EspritTroc/Vente/update_vente.html.twig', array(
                    'vente' => $venteInf));
            }
        }

    }


    public function getAllVenteAction(Request $request){
        $ventes=[];
        if($request ->getMethod() =="POST"){
            $achatRequest=$request->get('vente_search');
            $listventes=$this->getDoctrine()->getRepository(Vente::class)->createQueryBuilder('v')
                ->where("v.titre LIKE '%$achatRequest%'")
                ->getQuery()->getResult();;
        }
        else {
            $listventes = $this->getDoctrine()->getRepository(Vente::class)->findAll();
        }
                foreach ($listventes as $vente){
                    $u=$this->getDoctrine()->getRepository(User::class)->find($vente->getIdUser());

                    $v["id"] = $vente->getId();
                    $v["titre"] = $vente->getTitre();
                    $v["emplacement"] = $vente->getEmplacement();
                    $v["date"] = $vente->getDateAjout();
                    $v["photo"] = $vente->getPhoto();
                    $v["nom_ann"] = $u->getNom();
                    $v["prenom_ann"] = $u->getPrenom();
                    $v["categorie"] = $vente->getCategorie();
                    $v["prix"] = $vente->getPrix();

                    array_push($ventes , $v);

                }

                return $this->render('@EspritTroc/Vente/all_vente.html.twig',array('ventes'=>$ventes));

    }

    public function getVenteByIdAction($id){

        $ventes = [];

        $listeventes = $this->getDoctrine()->getRepository(Vente::class)->find($id);

        $u=$this->getDoctrine()->getRepository(User::class)->find($listeventes->getIdUser());


        $v["id"] = $listeventes->getId();
        $v["titre"] = $listeventes->getTitre();
        $v["emplacement"] = $listeventes->getEmplacement();
        $v["date"] = $listeventes->getDateAjout();
        $v["photo"] = $listeventes->getPhoto();
        $v["nom_ann"] = $u->getNom();
        $v["mail_ann"] = $u->getEmail();
        $v["prenom_ann"] = $u->getPrenom();
        $v["categorie"] = $listeventes->getCategorie();
        $v["description"] = $listeventes->getDescription();
        $v["prix"] = $listeventes->getPrix();

        array_push($ventes , $v);




        return $this->render('@EspritTroc/Vente/vente_by_id.html.twig', array('ventes'=>$ventes));

    }

    public function VenteByUserAction(Request $request){
        $user =$this->container->get('security.token_storage')->getToken()->getUser();
        if($user == null || empty($user)){
            return $this->redirectToRoute( 'fos_user_security_login');
        }
        else{
            $id_user = $user->getId();
            $currentUser=$this->getDoctrine()->getRepository(User::class)->find($id_user);

            $ventes=[];
            $listventes=$this->getDoctrine()->getRepository(Vente::class)->findBy(array('idUser'=>$currentUser));

            foreach ($listventes as $vente){
                $u=$this->getDoctrine()->getRepository(User::class)->find($vente->getIdUser());

                $v["id"] = $vente->getId();
                $v["titre"] = $vente->getTitre();
                $v["emplacement"] = $vente->getEmplacement();
                $v["date"] = $vente->getDateAjout();
                $v["photo"] = $vente->getPhoto();
                $v["nom_ann"] = $u->getNom();
                $v["prenom_ann"] = $u->getPrenom();
                $v["categorie"] = $vente->getCategorie();
                $v["prix"] = $vente->getPrix();

                array_push($ventes , $v);

            }

            return $this->render('@EspritTroc/Vente/vente_by_user.html.twig',array('ventes'=>$ventes));
        }



    }

    function VenteJsonAction(Request $request){

        $plein_text = $request->get('plein_text');
        $repository = $this->getDoctrine()->getRepository(Vente::class);
        $results=$repository->createQueryBuilder('v')
            ->where("v.titre LIKE '%$plein_text%'")
            ->getQuery()->getArrayResult();
        return new JsonResponse($results);
    }

    public function getAllVenteAdminAction(Request $request){
        $ventes=[];

            $listventes = $this->getDoctrine()->getRepository(Vente::class)->findAll();

        foreach ($listventes as $vente){
            $u=$this->getDoctrine()->getRepository(User::class)->find($vente->getIdUser());

            $v["id"] = $vente->getId();
            $v["titre"] = $vente->getTitre();
            $v["emplacement"] = $vente->getEmplacement();
            $v["date"] = $vente->getDateAjout();
            $v["photo"] = $vente->getPhoto();
            $v["nom_ann"] = $u->getNom();
            $v["prenom_ann"] = $u->getPrenom();
            $v["categorie"] = $vente->getCategorie();
            $v["description"] = $vente->getDescription();
            $v["prix"] = $vente->getPrix();

            array_push($ventes , $v);

        }



        return $this->render('@EspritTroc/Vente/all_vente_admin.html.twig',array('ventes'=>$ventes));

    }

    public function DeleteVenteAdminAction($id){
        $vente = $this->getDoctrine()->getRepository(Vente::class)->find($id);
        if($vente==null) {
            return new Response("Achat non trouvé");
        }
        $notif = new  Notification();
        $notif->setStatus(0);
        $notif->setSubject("suppression");
        $notif->setText("L'admin a supprimer votre annonce de vente ");
        $notif->setIdUser($vente->getIdUser());
        $em = $this->getDoctrine()->getManager();
        $em->remove($vente);
        $em->flush();

        $em1 = $this->getDoctrine()->getManager();
        $em1->persist($notif);
        $em1->flush();

        return $this->redirectToRoute('all_vente_admin');
    }




    public function addToPanierAction(Request $request,Vente $vente)
    {
        $panier = new Panier();
        $em = $this->getDoctrine()->getManager();
        $panier->setIdProduit($vente);
        $user =$this->container->get('security.token_storage')->getToken()->getUser();
        $id_user = $user->getId();
        $currentUser=$this->getDoctrine()->getRepository(User::class)->find($id_user);
        $panier->setIdUser($currentUser);
        $em->persist($panier);
        $em->flush();

        return $this->render('@EspritTroc/Vente/all_vente.html.twig',array('ventes'=>$vente));
    }
    public function addToWishAction(Request $request,Vente $vente)
    {
        $wishlist = new Wishlist();
        $em = $this->getDoctrine()->getManager();
        $wishlist->setIdProduit($vente);
        $user =$this->container->get('security.token_storage')->getToken()->getUser();
        $id_user = $user->getId();
        $currentUser=$this->getDoctrine()->getRepository(User::class)->find($id_user);
        $wishlist->setIdUser($currentUser);
        $em->persist($wishlist);
        $em->flush();

        return $this->render('@EspritTroc/Vente/all_vente.html.twig',array('ventes'=>$vente));
    }
}