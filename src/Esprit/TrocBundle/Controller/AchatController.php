<?php


namespace Esprit\TrocBundle\Controller;
use AppBundle\Entity\User;
use Esprit\TrocBundle\Entity\Achat;
use Esprit\TrocBundle\Entity\Notification;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;

class AchatController extends Controller
{
    public function AddAchatAction(Request $request){

        $user =$this->container->get('security.token_storage')->getToken()->getUser();
        $desc = 'Sans Description';

        if($user == null || empty($user) || $user == "anon."){
            return $this->redirectToRoute( 'fos_user_security_login');
        }
        else{
            $id_user = $user->getId();
            $currentUser=$this->getDoctrine()->getRepository(User::class)->find($id_user);

            $achat = new Achat();
            if($request ->getMethod() =="POST"){


                if(null!=$currentUser){
                    if ($request->get('prix')<0){
                        $this->get('session')->getFlashBag()->add('notice','le prix doit être un nombre positif !');
                        return $this->render('@EspritTroc/Achat/add_achat.html.twig');
                    }
                    else{
                        $filephoto = $request->files->get('photo');
                        $fileNamephoto = $this->generateUniqueFileName().'.'.$filephoto->guessExtension();
                        $filephoto->move($this->getParameter('brochures_directory'), $fileNamephoto);
                        $achat->setPhoto($fileNamephoto);
                        $achat->setDateAjout(new \DateTime());
                        $achat->setTitre($request->get('titre'));
                        $achat->setPrix($request->get('prix'));
                        $achat->setEmplacement($request->get('emplacement'));
                        if($request->get('description') != null){
                            $desc = $request->get('description');
                        }
                        $achat->setDescription($desc);

                        $achat->setCategorie($request->get('categorie'));

                        $achat->setIdUser($currentUser);
                        $em = $this->getDoctrine()->getManager();
                        $em->persist($achat);
                        $em->flush();

                        return $this->redirectToRoute('all_achat');
                    }
                }

            }
            else{

                return $this->render('@EspritTroc/Achat/add_achat.html.twig');
            }
        }
    }

    /**
     * @return string
     */
    private function generateUniqueFileName(){
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function DeleteAchatAction($id){
        $achat = $this->getDoctrine()->getRepository(Achat::class)->find($id);
        if($achat==null) {
            return new Response("Achat non trouvé");
        }
        $em = $this->getDoctrine()->getManager();
        $em->remove($achat);
        $em->flush();

      return $this->redirectToRoute('achat_by_user');

    }

    public function UpdateAchatAction(Request $request,$id){


        $user =$this->container->get('security.token_storage')->getToken()->getUser();
        $desc = 'Sans Description';

        if($user == null || empty($user) || $user == "anon."){
            return $this->redirectToRoute( 'fos_user_security_login');
        }
        else{
            $achatInf = $this->getDoctrine()->getRepository(Achat::class)->find($id);

            if($achatInf==null) {
                return new Response("Achat non trouvé");
            }

            $id_user = $user->getId();
            $currentUser=$this->getDoctrine()->getRepository(User::class)->find($id_user);


            if($request ->getMethod() =="POST"){


                if(null!=$currentUser){
                    if ($request->get('prix')<0){
                        $this->get('session')->getFlashBag()->add('notice','le prix doit être un nombre positif !');
                    }
                    else{
                        $achat = $achatInf;
                        $filephoto = $request->files->get('photo');
                        $fileNamephoto = $this->generateUniqueFileName().'.'.$filephoto->guessExtension();
                        $filephoto->move($this->getParameter('brochures_directory'), $fileNamephoto);
                        $achat->setPhoto($fileNamephoto);
                        $achat->setDateAjout(new \DateTime());
                        $achat->setTitre($request->get('titre'));
                        $achat->setPrix($request->get('prix'));
                        $achat->setEmplacement($request->get('emplacement'));
                        if($request->get('description') != null){
                            $desc = $request->get('description');
                        }
                        $achat->setDescription($desc);

                        $achat->setCategorie($request->get('categorie'));

                        $achat->setIdUser($currentUser);
                        $em = $this->getDoctrine()->getManager();
                        $em->persist($achat);
                        $em->flush();


                    }
                }
                return $this->redirectToRoute('achat_by_user');
            }
            else{


                return $this->render('@EspritTroc/Achat/update_achat.html.twig', array(
                    'achat' => $achatInf));
            }
        }

    }


    public function getAllAchatAction(Request $request){


        $achats=[];
        if($request ->getMethod() =="POST"){
            $achatRequest=$request->get('achat_search');
            $listachats=$this->getDoctrine()->getRepository(Achat::class)->createQueryBuilder('a')
                ->where("a.titre LIKE '%$achatRequest%'")
                ->getQuery()->getResult();;
        }
        else{
            $listachats=$this->getDoctrine()->getRepository(Achat::class)->findAll();
        }


            foreach ($listachats as $achat){
            $u=$this->getDoctrine()->getRepository(User::class)->find($achat->getIdUser());

            $a["id"] = $achat->getId();
            $a["titre"] = $achat->getTitre();
            $a["emplacement"] = $achat->getEmplacement();
            $a["date"] = $achat->getDateAjout();
            $a["photo"] = $achat->getPhoto();
            $a["nom_ann"] = $u->getNom();
            $a["prenom_ann"] = $u->getPrenom();
            $a["categorie"] = $achat->getCategorie();
            $a["prix"] = $achat->getPrix();

            array_push($achats , $a);

        }

        return $this->render('@EspritTroc/Achat/all_achat.html.twig',array('achats'=>$achats));

    }

    public function getAchatByIdAction($id){

        $achats = [];

        $listeachats = $this->getDoctrine()->getRepository(Achat::class)->find($id);

        $u=$this->getDoctrine()->getRepository(User::class)->find($listeachats->getIdUser());
        $a["id"] = $listeachats->getId();
        $a["titre"] = $listeachats->getTitre();
        $a["emplacement"] = $listeachats->getEmplacement();
        $a["date"] = $listeachats->getDateAjout();
        $a["photo"] = $listeachats->getPhoto();
        $a["nom_ann"] = $u->getNom();
        $a["mail_ann"] = $u->getEmail();
        $a["prenom_ann"] = $u->getPrenom();
        $a["categorie"] = $listeachats->getCategorie();
        $a["description"] = $listeachats->getDescription();
        $a["prix"] = $listeachats->getPrix();

        array_push($achats , $a);




        return $this->render('@EspritTroc/Achat/achat_by_id.html.twig', array('achats'=>$achats));

    }

    public function AchatByUserAction(Request $request){

        $user =$this->container->get('security.token_storage')->getToken()->getUser();
        if($user == null || empty($user)){
            return $this->redirectToRoute( 'fos_user_security_login');
        }
        else {
            $id_user = $user->getId();
            $currentUser = $this->getDoctrine()->getRepository(User::class)->find($id_user);

            $achats = [];
            $listachats = $this->getDoctrine()->getRepository(Achat::class)->findBy(array('idUser' => $currentUser));

            foreach ($listachats as $achat) {
                $u = $this->getDoctrine()->getRepository(User::class)->find($achat->getIdUser());

                $v["id"] = $achat->getId();
                $v["titre"] = $achat->getTitre();
                $v["emplacement"] = $achat->getEmplacement();
                $v["date"] = $achat->getDateAjout();
                $v["photo"] = $achat->getPhoto();
                $v["nom_ann"] = $u->getNom();
                $v["prenom_ann"] = $u->getPrenom();
                $v["categorie"] = $achat->getCategorie();
                $v["prix"] = $achat->getPrix();

                array_push($achats, $v);


            }

                return $this->render('@EspritTroc/Achat/achat_by_user.html.twig', array('achats' => $achats));
        }

    }

    function AchatJsonAction(Request $request){

        $plein_text = $request->get('plein_text');
        $repository = $this->getDoctrine()->getRepository(Achat::class);
        $results=$repository->createQueryBuilder('a')
            ->where("a.titre LIKE '%$plein_text%'")
            ->getQuery()->getArrayResult();
        return new JsonResponse($results);
    }

    public function getAllAchatAdminAction(Request $request){

        $achats=[];

            $listachats=$this->getDoctrine()->getRepository(Achat::class)->findAll();

        foreach ($listachats as $achat){
            $u=$this->getDoctrine()->getRepository(User::class)->find($achat->getIdUser());

            $a["id"] = $achat->getId();
            $a["titre"] = $achat->getTitre();
            $a["emplacement"] = $achat->getEmplacement();
            $a["date"] = $achat->getDateAjout();
            $a["photo"] = $achat->getPhoto();
            $a["nom_ann"] = $u->getNom();
            $a["prenom_ann"] = $u->getPrenom();
            $a["categorie"] = $achat->getCategorie();
            $a["description"] = $achat->getDescription();
            $a["prix"] = $achat->getPrix();

            array_push($achats , $a);

        }

        return $this->render('@EspritTroc/Achat/all_achat_admin.html.twig',array('achats'=>$achats));

    }

    public function DeleteAchatAdminAction($id){
        $achat = $this->getDoctrine()->getRepository(Achat::class)->find($id);
        if($achat==null) {
            return new Response("Achat non trouvé");
        }
        $notif = new  Notification();
        $notif->setStatus(0);
        $notif->setSubject("suppression");
        $notif->setText("L'admin a supprimer votre annonce d'achat ");
        $notif->setIdUser($achat->getIdUser());
        $em = $this->getDoctrine()->getManager();
        $em->remove($achat);

        $em1 = $this->getDoctrine()->getManager();
        $em1->persist($notif);
        $em1->flush();


        return $this->redirectToRoute('all_achat_admin');
    }

}